# 삽입 정렬
# 처리되지 않은 데이터를 하나씩 골라 적절한 위치에 삽입
# 일반 적으로 선택 정렬에 비해 난이도 높음
# 일반적으로 더 효율적

# 매번 자신의 왼쪽의 데이터와 비교하면서, 
# 자기보다 크면 왼쪽으로 이동해야하므로, swap해준다
# 위 동작을 반복하면서, 오름차순 정렬이 이뤄진다.
array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]
  
for i in range(1, len(array)):
  for j in range(i, 0, -1): # i 부터 0까지가 아니라 1까지 1씩 감소
    if array[j] < array[j - 1]: # 한 칸씩 왼쪽으로 이동
      array[j], array[j - 1] = array[j - 1], array[j] 
    else: # 자기보다 작으면 그 위치에서 멈춤
      break

print(array)

# 삽입 정렬의 시간 복잡도
# O(N^2)
# 선택 정렬과 마찬가지로 반복문이 두 번 중첩되어 사용됨
# 삽입 정렬은 현재 리스트의 데이터가 거의 정렬되어 있는 상태라면 매우 빠르게 동작
# 최선의 경우 O(N)의 시간 복잡도
