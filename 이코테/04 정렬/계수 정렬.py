# 계수 정렬
# 특정한 조건이 부합할 때만 사용할 수 있지만 매우 빠르게 동작하는 정렬 알고리즘
# 데이터의 크기 범위가 제한되어 정수 형태로 표현할 수 있을 때 사용 가능
# 데이터의 개수가 N, 데이터(양수) 중 최댓값이 K일 때 최악의 경우에도 시간 복잡도 O(N + K)
# 각각의 데이터가 몇 번씩 등장했는지, 즉 count하는 방식
# 가장 작은 데이터부터 가장 큰 데이터까지 모두 담을 수 있는 list를 만들어야 하기 때문에 상대적으로 공간 복잡도는 높지만, 조건만 맞으면 빠르다


# 모든 원소의 값이 0보다 크거나 같다고 가정
array = [7, 5, 9, 0, 3, 1, 6, 2, 9, 1, 4, 8, 0, 5, 2]
# 모든 범위를 포함하는 리스트 선언( 모든 값은 0으로 초기화)
count = [0] * (max(array) + 1)

# 주어진 데이터의 개수만큼 확인
# O(N)
for i in range(len(array)):
  # 각 데이터에 해당하는 인덱스 값 증가
  count[array[i]] += 1

# 원소 중 가장 큰 값 K만큼
# 각 인덱스를 확인하고,
# 각 인덱스의 값만큼 출력 수행
# O(N + K)
# 리스트에 기록된 정렬 정보 확인 
for i in range(len(count)):
  for j in range(count[i]):
    print(i, end=' ')


# 계수 정렬의 복잡도 분석
# 계수 정렬의 시간 복잡도와 공간 복잡도 모두 O(N + K)
# 계수 정렬은 때에 따라서 심각한 비효율
# ex) 데이터가 0와 999,999로 단 2개만 존재
# 계수 정렬은 동일한 값을 가지는 데이터가 여러 개 등장할 때 효과적으로 사용
# ex) 성적 100명 여러 명